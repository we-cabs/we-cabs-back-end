# Welcome to Serverless!
#
# This file is the main config file for wecabs service.

# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: wecabs
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

frameworkVersion: '2'


provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-west-2
  environment:
    USER_TABLE: ${self:service}-${opt:stage, self:provider.stage}-USER_TABLE
    BOOKING_TABLE: ${self:service}-${opt:stage, self:provider.stage}-BOOKING_TABLE
    BID_TABLE: ${self:service}-${opt:stage, self:provider.stage}-BID_TABLE
    CAR_TABLE:  ${self:service}-${opt:stage, self:provider.stage}-CAR_TABLE
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
      Resource: "*"
functions:
  imageGet:
    handler: api/image.get
    events:
      - http:
          path: image/{name}
          method: get
          cors: true
 # user api functions

  userPut:
    handler: api/user.put
    memorySize: 128
    description: put user details
    events:
      - http:
          path: user
          method: post
          cors: true
  userGet:
    handler: api/user.get
    events:
      - http:
          path: user/{phone}
          method: get
          cors: true

  userList:
    handler: api/user.list
    memorySize: 128
    description: list all users details
    events:
      - http:
          path: user
          method: get
          cors: true
  userListByLocation:
    handler: api/user.listByLocation
    events:
      - http:
          path: user/location/{location}
          method: get
          cors: true
  # booking api functions

  bookingPut:
    handler: api/booking.put
    memorySize: 128
    description: put booking details
    events:
      - http:
          path: booking
          method: post
          cors: true

  bookingGet:
    handler: api/booking.get
    events:
      - http:
          path: booking/{bookingId}
          method: get
          cors: true

  bookingList:
    handler: api/booking.list
    memorySize: 128
    description: list all bookings details
    events:
      - http:
          path: booking
          method: get
          cors: true

  bookingListByUserId:
    handler: api/booking.listByUserId
    events:
      - http:
          path: booking/userId/{userId}
          method: get
          cors: true
  bookingListByLocation:
    handler: api/booking.listByLocation
    events:
      - http:
          path: booking/location/{location}
          method: get
          cors: true
  # bid api functions

  bidPut:
    handler: api/bid.put
    memorySize: 128
    description: put bid details
    events:
      - http:
          path: bid
          method: post
          cors: true

  bidGet:
    handler: api/bid.get
    memorySize: 128
    description: get bid details
    events:
      - http:
          path: bid/{bidId}
          method: get
          cors: true

  bidListByBookingId:
    handler: api/bid.listByBookingId
    events:
      - http:
          path: bid/bookingId/{bookingId}
          method: get
          cors: true
  bidListByUserId:
    handler: api/bid.listByUserId
    events:
      - http:
          path: bid/userId/{userId}
          method: get
          cors: true
  bidList:
    handler: api/bid.list
    memorySize: 128
    description: list all bids details
    events:
      - http:
          path: bid
          method: get
          cors: true

  # car api functions

  carPut:
    handler: api/car.put
    memorySize: 128
    description: put car details
    events:
      - http:
          path: car
          method: post
          cors: true

  carGet:
    handler: api/car.get
    events:
      - http:
          path: car/{carPlate}
          method: get
          cors: true
  carListByUserId:
    handler: api/car.listByUserId
    events:
      - http:
          path: car/userId/{userId}
          method: get
          cors: true

  carList:
    handler: api/car.list
    memorySize: 128
    description: list all cars details
    events:
      - http:
          path: car
          method: get
          cors: true
#plugins:
#  - serverless-domain-manager
#
#custom:
#  customDomain:
#    domainName: 'api.mycompany.com' # Change this to your domain.
#    basePath: 'users' # This will be prefixed to all routes
#    stage: ${self:provider.stage}
#    createRoute53Record: true
resources:
  Resources:
    UserDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: "phone"
            AttributeType: "S"
        KeySchema:
          -
            AttributeName: "phone"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: "NEW_AND_OLD_IMAGES"
        TableName: ${self:provider.environment.USER_TABLE}

    BookingDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: "bookingId"
            AttributeType: "S"
        KeySchema:
          -
            AttributeName: "bookingId"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: "NEW_AND_OLD_IMAGES"
        TableName: ${self:provider.environment.BOOKING_TABLE}

    BidDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: "bidId"
            AttributeType: "S"
        KeySchema:
          -
            AttributeName: "bidId"
            KeyType: "HASH"
#        GlobalSecondaryIndexes:
#          - IndexName: BookingIdIndex
#            KeySchema:
#              - AttributeName: linkedBookingId
#                KeyType: "HASH"
#            Projection:
#              ProjectionType: 'ALL'
#            ProvisionedThroughput:
#              ReadCapacityUnits: 1
#              WriteCapacityUnits: 1

        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: "NEW_AND_OLD_IMAGES"
        TableName: ${self:provider.environment.BID_TABLE}

    CarDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: "carPlate"
            AttributeType: "S"
        KeySchema:
          -
            AttributeName: "carPlate"
            KeyType: "HASH"

        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: "NEW_AND_OLD_IMAGES"
        TableName: ${self:provider.environment.CAR_TABLE}
